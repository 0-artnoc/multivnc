// -*- C++ -*- generated by wxGlade 0.6.3

#include "FrameMain.h"

// begin wxGlade: ::extracode

// end wxGlade


FrameMain::FrameMain(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: FrameMain::FrameMain
    panel_top = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSTATIC_BORDER|wxTAB_TRAVERSAL);
    splitwin_main = new wxSplitterWindow(panel_top, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_LIVE_UPDATE);
    splitwin_main_pane_2 = new wxPanel(splitwin_main, wxID_ANY);
    splitwin_main_pane_1 = new wxPanel(splitwin_main, wxID_ANY);
    splitwin_left = new wxSplitterWindow(splitwin_main_pane_1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_LIVE_UPDATE);
    splitwin_left_pane_2 = new wxPanel(splitwin_left, wxID_ANY);
    splitwin_left_pane_1 = new wxPanel(splitwin_left, wxID_ANY);
    sizer_bookmarks_staticbox = new wxStaticBox(splitwin_left_pane_2, -1, _("Bookmarks"));
    sizer_services_staticbox = new wxStaticBox(splitwin_left_pane_1, -1, _("Available VNC Servers"));
    frame_main_menubar = new wxMenuBar();
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(wxID_YES, _("&Connect..."), _("Connect to a specific host."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_REDO, _("&Listen"), _("Listen for an incoming connection."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_STOP, _("&Disconnect"), _("Terminate connection."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_FILE, _("Show &Log"), _("Show detailed log."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_PREFERENCES, wxEmptyString, _("Change preferences."), wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_SAVE, _("Take Screenshot"), wxEmptyString, wxITEM_NORMAL);
    wxMenu* wxglade_tmp_menu_1_sub = new wxMenu();
    wxglade_tmp_menu_1_sub->Append(ID_STATS_SAVE_UPD_RAWBYTE, _("Save Framebuffer Update Data Rate Statistics"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1_sub->Append(ID_STATS_SAVE_UPD_COUNT, _("Save Framebuffer Update Count Statistics"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1_sub->Append(ID_STATS_SAVE_LATENCIES, _("Save Latency Statistics"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1_sub->Append(ID_STATS_SAVE_LOSSRATIO, _("Save Multicast Loss Ratio Statistics"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1_sub->Append(ID_STATS_SAVE_RECVBUF, _("Save Multicast Receive Buffer Statistics"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_ANY, _("Statistics"), wxglade_tmp_menu_1_sub, wxEmptyString);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(wxID_EXIT, wxEmptyString, _("Exit MultiVNC."), wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_1, _("&Machine"));
    wxMenu* wxglade_tmp_menu_2 = new wxMenu();
    wxglade_tmp_menu_2->Append(ID_TOOLBAR, _("Toolbar"), wxEmptyString, wxITEM_CHECK);
    wxglade_tmp_menu_2->Append(ID_DISCOVERED, _("Discovered Servers"), wxEmptyString, wxITEM_CHECK);
    wxglade_tmp_menu_2->Append(ID_BOOKMARKS, _("Bookmarks"), wxEmptyString, wxITEM_CHECK);
    wxglade_tmp_menu_2->Append(ID_STATISTICS, _("Statistics"), wxEmptyString, wxITEM_CHECK);
    wxMenu* wxglade_tmp_menu_2_sub = new wxMenu();
    wxglade_tmp_menu_2_sub->Append(ID_SEAMLESS_NORTH, _("North"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_2_sub->Append(ID_SEAMLESS_EAST, _("East"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_2_sub->Append(ID_SEAMLESS_WEST, _("West"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_2_sub->Append(ID_SEAMLESS_SOUTH, _("South"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_2_sub->Append(ID_SEAMLESS_DISABLED, _("Disabled"), wxEmptyString, wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(wxID_ANY, _("Edge Connector"), wxglade_tmp_menu_2_sub, wxEmptyString);
    wxglade_tmp_menu_2->AppendSeparator();
    wxglade_tmp_menu_2->Append(ID_FULLSCREEN, _("Fullscreen"), wxEmptyString, wxITEM_CHECK);
    frame_main_menubar->Append(wxglade_tmp_menu_2, _("&View"));
    wxMenu* wxglade_tmp_menu_3 = new wxMenu();
    wxglade_tmp_menu_3->Append(wxID_ADD, _("&Add Bookmark"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->AppendSeparator();
    wxglade_tmp_menu_3->Append(wxID_EDIT, _("&Edit Bookmark"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(wxID_DELETE, _("&Delete Bookmark"), wxEmptyString, wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_3, _("&Bookmarks"));
    wxMenu* wxglade_tmp_menu_4 = new wxMenu();
    wxglade_tmp_menu_4->Append(wxID_UP, _("&Share a Window"), _("Beam a window to the server."), wxITEM_NORMAL);
    wxglade_tmp_menu_4->Append(wxID_CANCEL, _("S&top Sharing Window"), _("Stop Window Sharing."), wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_4, _("Window &Sharing"));
    wxMenu* wxglade_tmp_menu_5 = new wxMenu();
    wxglade_tmp_menu_5->Append(wxID_HELP, _("&Contents"), _("Show Help."), wxITEM_NORMAL);
    wxglade_tmp_menu_5->Append(wxID_ABOUT, wxEmptyString, wxEmptyString, wxITEM_NORMAL);
    frame_main_menubar->Append(wxglade_tmp_menu_5, _("&Help"));
    SetMenuBar(frame_main_menubar);
    frame_main_statusbar = CreateStatusBar(2, 0);
    frame_main_toolbar = new wxToolBar(this, -1, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL|wxTB_DOCKABLE|wxTB_3DBUTTONS|wxTB_TEXT);
    SetToolBar(frame_main_toolbar);
    frame_main_toolbar->SetToolBitmapSize(wxSize(24, 24));
    frame_main_toolbar->AddTool(wxID_YES, _("Connect"), (bitmapFromMem(connect_png)), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_main_toolbar->AddTool(wxID_REDO, _("Listen"), (bitmapFromMem(listen_png)), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_main_toolbar->AddTool(wxID_STOP, _("Disconnect"), (bitmapFromMem(disconnect_png)), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_main_toolbar->AddSeparator();
    frame_main_toolbar->AddTool(ID_FULLSCREEN, _("Fullscreen"), (bitmapFromMem(fullscreen_png)), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_main_toolbar->AddTool(wxID_SAVE, _("Take Screenshot"), (bitmapFromMem(screenshot_png)), wxNullBitmap, wxITEM_NORMAL, wxEmptyString, wxEmptyString);
    frame_main_toolbar->Realize();
    const wxString *list_box_services_choices = NULL;
    list_box_services = new wxListBox(splitwin_left_pane_1, ID_LISTBOX_SERVICES, wxDefaultPosition, wxDefaultSize, 0, list_box_services_choices, wxLB_SINGLE|wxLB_HSCROLL|wxLB_NEEDED_SB);
    const wxString *list_box_bookmarks_choices = NULL;
    list_box_bookmarks = new wxListBox(splitwin_left_pane_2, ID_LISTBOX_BOOKMARKS, wxDefaultPosition, wxDefaultSize, 0, list_box_bookmarks_choices, wxLB_SINGLE|wxLB_HSCROLL|wxLB_NEEDED_SB);
    notebook_connections = new wxNotebook(splitwin_main_pane_2, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(FrameMain, wxFrame)
    // begin wxGlade: FrameMain::event_table
    EVT_MENU(wxID_YES, FrameMain::machine_connect)
    EVT_MENU(wxID_REDO, FrameMain::machine_listen)
    EVT_MENU(wxID_STOP, FrameMain::machine_disconnect)
    EVT_MENU(wxID_FILE, FrameMain::machine_showlog)
    EVT_MENU(wxID_PREFERENCES, FrameMain::machine_preferences)
    EVT_MENU(wxID_SAVE, FrameMain::machine_screenshot)
    EVT_MENU(ID_STATS_SAVE_UPD_RAWBYTE, FrameMain::machine_save_stats_upd_rawbytes)
    EVT_MENU(ID_STATS_SAVE_UPD_COUNT, FrameMain::machine_save_stats_upd_count)
    EVT_MENU(ID_STATS_SAVE_LATENCIES, FrameMain::machine_save_stats_latencies)
    EVT_MENU(ID_STATS_SAVE_LOSSRATIO, FrameMain::machine_save_stats_lossratio)
    EVT_MENU(ID_STATS_SAVE_RECVBUF, FrameMain::machine_save_stats_recvbuf)
    EVT_MENU(wxID_EXIT, FrameMain::machine_exit)
    EVT_MENU(ID_TOOLBAR, FrameMain::view_toggletoolbar)
    EVT_MENU(ID_DISCOVERED, FrameMain::view_togglediscovered)
    EVT_MENU(ID_BOOKMARKS, FrameMain::view_togglebookmarks)
    EVT_MENU(ID_STATISTICS, FrameMain::view_togglestatistics)
    EVT_MENU(ID_SEAMLESS_NORTH, FrameMain::view_seamless)
    EVT_MENU(ID_SEAMLESS_EAST, FrameMain::view_seamless)
    EVT_MENU(ID_SEAMLESS_WEST, FrameMain::view_seamless)
    EVT_MENU(ID_SEAMLESS_SOUTH, FrameMain::view_seamless)
    EVT_MENU(ID_SEAMLESS_DISABLED, FrameMain::view_seamless)
    EVT_MENU(ID_FULLSCREEN, FrameMain::view_togglefullscreen)
    EVT_MENU(wxID_ADD, FrameMain::bookmarks_add)
    EVT_MENU(wxID_EDIT, FrameMain::bookmarks_edit)
    EVT_MENU(wxID_DELETE, FrameMain::bookmarks_delete)
    EVT_MENU(wxID_UP, FrameMain::windowshare_start)
    EVT_MENU(wxID_CANCEL, FrameMain::windowshare_stop)
    EVT_MENU(wxID_HELP, FrameMain::help_contents)
    EVT_MENU(wxID_ABOUT, FrameMain::help_about)
    EVT_TOOL(wxID_YES, FrameMain::machine_connect)
    EVT_TOOL(wxID_REDO, FrameMain::machine_listen)
    EVT_TOOL(wxID_STOP, FrameMain::machine_disconnect)
    EVT_TOOL(ID_FULLSCREEN, FrameMain::view_togglefullscreen)
    EVT_TOOL(wxID_SAVE, FrameMain::machine_screenshot)
    EVT_LISTBOX_DCLICK(ID_LISTBOX_SERVICES, FrameMain::listbox_services_dclick)
    EVT_LISTBOX(ID_LISTBOX_SERVICES, FrameMain::listbox_services_select)
    EVT_LISTBOX_DCLICK(ID_LISTBOX_BOOKMARKS, FrameMain::listbox_bookmarks_dclick)
    EVT_LISTBOX(ID_LISTBOX_BOOKMARKS, FrameMain::listbox_bookmarks_select)
    EVT_NOTEBOOK_PAGE_CHANGED(wxID_ANY, FrameMain::notebook_connections_pagechanged)
    // end wxGlade
END_EVENT_TABLE();


void FrameMain::machine_connect(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_connect) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_listen(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_listen) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_disconnect(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_disconnect) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_showlog(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_showlog) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_preferences(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_preferences) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_screenshot(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_screenshot) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_save_stats_upd_rawbytes(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_save_stats_upd_rawbytes) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_save_stats_upd_count(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_save_stats_upd_count) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_save_stats_latencies(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_save_stats_latencies) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_save_stats_lossratio(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_save_stats_lossratio) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_save_stats_recvbuf(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_save_stats_recvbuf) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::machine_exit(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::machine_exit) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::view_toggletoolbar(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::view_toggletoolbar) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::view_togglediscovered(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::view_togglediscovered) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::view_togglebookmarks(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::view_togglebookmarks) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::view_togglestatistics(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::view_togglestatistics) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::view_seamless(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::view_seamless) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::view_togglefullscreen(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::view_togglefullscreen) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::bookmarks_add(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::bookmarks_add) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::bookmarks_edit(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::bookmarks_edit) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::bookmarks_delete(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::bookmarks_delete) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::windowshare_start(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::windowshare_start) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::windowshare_stop(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::windowshare_stop) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::help_contents(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::help_contents) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::help_about(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::help_about) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::listbox_services_dclick(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::listbox_services_dclick) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::listbox_services_select(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::listbox_services_select) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::listbox_bookmarks_dclick(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::listbox_bookmarks_dclick) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::listbox_bookmarks_select(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::listbox_bookmarks_select) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void FrameMain::notebook_connections_pagechanged(wxNotebookEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (FrameMain::notebook_connections_pagechanged) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add FrameMain event handlers


void FrameMain::set_properties()
{
    // begin wxGlade: FrameMain::set_properties
    SetTitle(_("MultiVNC"));
    wxIcon _icon;
    _icon.CopyFromBitmap(wxICON(icon));
    SetIcon(_icon);
    SetSize(wxSize(985, 852));
    int frame_main_statusbar_widths[] = { -1, 3 };
    frame_main_statusbar->SetStatusWidths(2, frame_main_statusbar_widths);
    const wxString frame_main_statusbar_fields[] = {
        _("Status"),
        _("zwei")
    };
    for(int i = 0; i < frame_main_statusbar->GetFieldsCount(); ++i) {
        frame_main_statusbar->SetStatusText(frame_main_statusbar_fields[i], i);
    }
    list_box_bookmarks->SetForegroundColour(wxColour(0, 0, 0));
    // end wxGlade
}


void FrameMain::do_layout()
{
    // begin wxGlade: FrameMain::do_layout
    wxBoxSizer* sizer_top = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_splitwinmain = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_notebook = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_bookmarks = new wxStaticBoxSizer(sizer_bookmarks_staticbox, wxHORIZONTAL);
    wxStaticBoxSizer* sizer_services = new wxStaticBoxSizer(sizer_services_staticbox, wxHORIZONTAL);
    sizer_services->Add(list_box_services, 1, wxALL|wxEXPAND, 3);
    splitwin_left_pane_1->SetSizer(sizer_services);
    sizer_bookmarks->Add(list_box_bookmarks, 1, wxALL|wxEXPAND, 3);
    splitwin_left_pane_2->SetSizer(sizer_bookmarks);
    splitwin_left->SplitHorizontally(splitwin_left_pane_1, splitwin_left_pane_2);
    sizer_2->Add(splitwin_left, 1, wxALL|wxEXPAND, 3);
    splitwin_main_pane_1->SetSizer(sizer_2);
    sizer_notebook->Add(notebook_connections, 1, wxALL|wxEXPAND, 3);
    splitwin_main_pane_2->SetSizer(sizer_notebook);
    splitwin_main->SplitVertically(splitwin_main_pane_1, splitwin_main_pane_2, 31);
    sizer_splitwinmain->Add(splitwin_main, 1, wxALL|wxEXPAND, 3);
    panel_top->SetSizer(sizer_splitwinmain);
    sizer_top->Add(panel_top, 1, wxEXPAND, 0);
    SetSizer(sizer_top);
    Layout();
    // end wxGlade
}

